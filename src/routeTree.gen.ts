/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as LayoutRouteImport } from "./routes/_layout";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as LayoutNavigationRouteImport } from "./routes/_layout.navigation";
import { Route as LayoutExtractionRouteImport } from "./routes/_layout.extraction";
import { Route as LayoutDownloadsRouteImport } from "./routes/_layout.downloads";
import { Route as LayoutFormsIndexRouteImport } from "./routes/_layout/forms/index";
import { Route as LayoutAuthTurnstileRouteImport } from "./routes/_layout.auth.turnstile";
import { Route as LayoutAuthChallengeRouteImport } from "./routes/_layout.auth.challenge";
import { Route as LayoutAuthBasicRouteImport } from "./routes/_layout.auth.basic";
import { Route as LayoutFormsResultSubmissionIdRouteImport } from "./routes/_layout/forms/result.$submissionId";

const LayoutRoute = LayoutRouteImport.update({
  id: "/_layout",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutNavigationRoute = LayoutNavigationRouteImport.update({
  id: "/navigation",
  path: "/navigation",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutExtractionRoute = LayoutExtractionRouteImport.update({
  id: "/extraction",
  path: "/extraction",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutDownloadsRoute = LayoutDownloadsRouteImport.update({
  id: "/downloads",
  path: "/downloads",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutFormsIndexRoute = LayoutFormsIndexRouteImport.update({
  id: "/forms/",
  path: "/forms/",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutAuthTurnstileRoute = LayoutAuthTurnstileRouteImport.update({
  id: "/auth/turnstile",
  path: "/auth/turnstile",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutAuthChallengeRoute = LayoutAuthChallengeRouteImport.update({
  id: "/auth/challenge",
  path: "/auth/challenge",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutAuthBasicRoute = LayoutAuthBasicRouteImport.update({
  id: "/auth/basic",
  path: "/auth/basic",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutFormsResultSubmissionIdRoute =
  LayoutFormsResultSubmissionIdRouteImport.update({
    id: "/forms/result/$submissionId",
    path: "/forms/result/$submissionId",
    getParentRoute: () => LayoutRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/downloads": typeof LayoutDownloadsRoute;
  "/extraction": typeof LayoutExtractionRoute;
  "/navigation": typeof LayoutNavigationRoute;
  "/auth/basic": typeof LayoutAuthBasicRoute;
  "/auth/challenge": typeof LayoutAuthChallengeRoute;
  "/auth/turnstile": typeof LayoutAuthTurnstileRoute;
  "/forms": typeof LayoutFormsIndexRoute;
  "/forms/result/$submissionId": typeof LayoutFormsResultSubmissionIdRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/downloads": typeof LayoutDownloadsRoute;
  "/extraction": typeof LayoutExtractionRoute;
  "/navigation": typeof LayoutNavigationRoute;
  "/auth/basic": typeof LayoutAuthBasicRoute;
  "/auth/challenge": typeof LayoutAuthChallengeRoute;
  "/auth/turnstile": typeof LayoutAuthTurnstileRoute;
  "/forms": typeof LayoutFormsIndexRoute;
  "/forms/result/$submissionId": typeof LayoutFormsResultSubmissionIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/_layout": typeof LayoutRouteWithChildren;
  "/_layout/downloads": typeof LayoutDownloadsRoute;
  "/_layout/extraction": typeof LayoutExtractionRoute;
  "/_layout/navigation": typeof LayoutNavigationRoute;
  "/_layout/auth/basic": typeof LayoutAuthBasicRoute;
  "/_layout/auth/challenge": typeof LayoutAuthChallengeRoute;
  "/_layout/auth/turnstile": typeof LayoutAuthTurnstileRoute;
  "/_layout/forms/": typeof LayoutFormsIndexRoute;
  "/_layout/forms/result/$submissionId": typeof LayoutFormsResultSubmissionIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/downloads"
    | "/extraction"
    | "/navigation"
    | "/auth/basic"
    | "/auth/challenge"
    | "/auth/turnstile"
    | "/forms"
    | "/forms/result/$submissionId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/downloads"
    | "/extraction"
    | "/navigation"
    | "/auth/basic"
    | "/auth/challenge"
    | "/auth/turnstile"
    | "/forms"
    | "/forms/result/$submissionId";
  id:
    | "__root__"
    | "/"
    | "/_layout"
    | "/_layout/downloads"
    | "/_layout/extraction"
    | "/_layout/navigation"
    | "/_layout/auth/basic"
    | "/_layout/auth/challenge"
    | "/_layout/auth/turnstile"
    | "/_layout/forms/"
    | "/_layout/forms/result/$submissionId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LayoutRoute: typeof LayoutRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_layout/navigation": {
      id: "/_layout/navigation";
      path: "/navigation";
      fullPath: "/navigation";
      preLoaderRoute: typeof LayoutNavigationRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/extraction": {
      id: "/_layout/extraction";
      path: "/extraction";
      fullPath: "/extraction";
      preLoaderRoute: typeof LayoutExtractionRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/downloads": {
      id: "/_layout/downloads";
      path: "/downloads";
      fullPath: "/downloads";
      preLoaderRoute: typeof LayoutDownloadsRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/forms/": {
      id: "/_layout/forms/";
      path: "/forms";
      fullPath: "/forms";
      preLoaderRoute: typeof LayoutFormsIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/auth/turnstile": {
      id: "/_layout/auth/turnstile";
      path: "/auth/turnstile";
      fullPath: "/auth/turnstile";
      preLoaderRoute: typeof LayoutAuthTurnstileRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/auth/challenge": {
      id: "/_layout/auth/challenge";
      path: "/auth/challenge";
      fullPath: "/auth/challenge";
      preLoaderRoute: typeof LayoutAuthChallengeRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/auth/basic": {
      id: "/_layout/auth/basic";
      path: "/auth/basic";
      fullPath: "/auth/basic";
      preLoaderRoute: typeof LayoutAuthBasicRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/forms/result/$submissionId": {
      id: "/_layout/forms/result/$submissionId";
      path: "/forms/result/$submissionId";
      fullPath: "/forms/result/$submissionId";
      preLoaderRoute: typeof LayoutFormsResultSubmissionIdRouteImport;
      parentRoute: typeof LayoutRoute;
    };
  }
}

interface LayoutRouteChildren {
  LayoutDownloadsRoute: typeof LayoutDownloadsRoute;
  LayoutExtractionRoute: typeof LayoutExtractionRoute;
  LayoutNavigationRoute: typeof LayoutNavigationRoute;
  LayoutAuthBasicRoute: typeof LayoutAuthBasicRoute;
  LayoutAuthChallengeRoute: typeof LayoutAuthChallengeRoute;
  LayoutAuthTurnstileRoute: typeof LayoutAuthTurnstileRoute;
  LayoutFormsIndexRoute: typeof LayoutFormsIndexRoute;
  LayoutFormsResultSubmissionIdRoute: typeof LayoutFormsResultSubmissionIdRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDownloadsRoute: LayoutDownloadsRoute,
  LayoutExtractionRoute: LayoutExtractionRoute,
  LayoutNavigationRoute: LayoutNavigationRoute,
  LayoutAuthBasicRoute: LayoutAuthBasicRoute,
  LayoutAuthChallengeRoute: LayoutAuthChallengeRoute,
  LayoutAuthTurnstileRoute: LayoutAuthTurnstileRoute,
  LayoutFormsIndexRoute: LayoutFormsIndexRoute,
  LayoutFormsResultSubmissionIdRoute: LayoutFormsResultSubmissionIdRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
